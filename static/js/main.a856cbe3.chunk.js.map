{"version":3,"sources":["firebase.js","Component/AddMessage.js","Component/MessageBox.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AddMessage","useState","text","setText","className","id","type","onChange","e","target","value","style","border","color","borderRadius","padding","background","fontSize","marginLeft","onClick","console","log","auth","currentUser","uid","messageRef","database","ref","message","name","providerData","push","alert","MessageBox","todoList","setTodoList","useEffect","on","snapshot","todos","val","Container","fluid","map","todo","Row","key","marginTop","photoURL","Col","xs","src","alt","textAlign","margin","App","props","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","isSignedIn","state","handleChange","bind","event","this","onSubmit","handleSubmit","paddingLeft","signOut","firebaseAuth","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a856cbe3.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nimport 'firebase/firestore'\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyDoFhVwAx4cYngh96KNDY7RjQCKB9SuOzE\",\r\n    authDomain: \"uni-talks.firebaseapp.com\",\r\n    databaseURL: \"https://uni-talks.firebaseio.com\",\r\n    projectId: \"uni-talks\",\r\n    storageBucket: \"uni-talks.appspot.com\",\r\n    messagingSenderId: \"56556087798\",\r\n    appId: \"1:56556087798:web:7d510019da467ab550ffd7\",\r\n    measurementId: \"G-RSC283PWF6\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","\r\nimport React, { useState } from 'react';\r\nimport firebase from '../firebase';\r\n\r\n\r\nexport default function AddMessage() {\r\nconst [text, setText] = useState('');\r\n\r\nconst handleOnChange = (e) => {\r\nsetText(e.target.value);\r\n};\r\nconst createMessage = () => {\r\n    console.log(firebase.auth().currentUser.uid)\r\nif(text !==''){\r\n    const messageRef = firebase.database().ref('Message');\r\nconst message = {\r\n    text,\r\n    name:firebase.auth().currentUser.providerData[0],\r\n}; \r\n\r\nmessageRef.push(message);\r\n}\r\nelse{\r\n    alert(\"Please test some message\");\r\n}\r\n};\r\nreturn (\r\n\r\n<div  className=\"enter-message\">\r\n\r\n    <input id='messagesend' type=\"text\" onChange={handleOnChange} value={text} />\r\n    <button style={{border:'none',color:\"#C4C4C4\",borderRadius:'50%',padding:'10px',background:\"#646566\",fontSize:\"25px\" ,marginLeft:\"1%\"}} className=\"far fa-paper-plane\" onClick={createMessage}/>\r\n</div>\r\n);\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport AddMessage from './AddMessage';\r\nimport ScrollableFeed from 'react-scrollable-feed'\r\n\r\nexport default function MessageBox() {\r\n    const [todoList, setTodoList] = useState();\r\n    // useEffect(()=>{\r\n    //     window.scrollTo({\r\n    //         top: 100,\r\n    //         left: 0,\r\n    //         behavior: 'smooth'\r\n    //     });\r\n    // },[])\r\n    useEffect(() => {\r\n    const todoRef = firebase.database().ref('Message');\r\n    todoRef.on('value', (snapshot) => {\r\n        const todos = snapshot.val();\r\n        const todoList = [];\r\n        for (let id in todos) {\r\n        todoList.push({ id, ...todos[id] });\r\n        }\r\n        setTodoList(todoList);\r\n        \r\n    });\r\n    }, []);\r\n    \r\n    return (\r\n        \r\n        <div>\r\n    <Container  id=\"box\" fluid>\r\n    <ScrollableFeed>\r\n                \r\n            {todoList\r\n            ? todoList.map((todo) =>\r\n            <Row key={todo.id} style={{marginTop:\"10px\"}}>\r\n                    {todo.name.photoURL ?(\r\n                        <Col xs={1}><img src={todo.name.photoURL} alt=\"Avatar\" className=\"avatar\"></img></Col> \r\n                    ):(\r\n                        <Col className=\"fas fa-user-circle\" style={{fontSize:\"40px\",color:\"#C4C4C4\"}} xs={1}></Col> \r\n                    )}\r\n                    \r\n                    <Col  className=\"text-left\" xs={11}><p style={{background:\"#4E555E\",padding:'3px 10px',fontSize:\"20px\",color:\"#C4C4C4\",borderRadius: \"10px\" }}>{todo.text} </p></Col>\r\n                </Row>\r\n            )\r\n            : (<div style={{fontSize:'40px',color:\"white\",textAlign:\"center\",margin:'10% 42%'}} >\r\n                <Row>\r\n                    Waiting For \r\n                </Row>\r\n                <Row>\r\n                    Go Justitech  \r\n                </Row>\r\n                <Row>\r\n                    Message  \r\n                </Row>\r\n            </div>)}\r\n            \r\n                </ScrollableFeed>\r\n    </Container>\r\n    {todoList\r\n            ? (\r\n            <AddMessage/>\r\n            )\r\n            : ''}\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // function Message (){\r\n// //     const [data,setData]= useState([]);\r\n// //         const db=firebase.database().ref().child(\"data\");\r\n// //         const newDatas=db.on('value',snap => snap.map((doc)=>({\r\n// //             id:doc.id,\r\n// //             ...doc.data()\r\n// //         }))\r\n// //         );\r\n// //         setData(newDatas)\r\n// //         if(data.length !=0){\r\n// //         return (\r\n// //             console.log(data)\r\n// //         );\r\n// // }}  \r\n// // export default Message;\r\n\r\n// class MessageBox extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {data:'Asif'};\r\n//     }\r\n//     componentDidMount(){\r\n//         var data =[]\r\n//         const roofRef=firebase.database().ref().child(\"uni-talks\");\r\n//         const speedRef = roofRef.child(\"data\")\r\n//             speedRef.on('value',snap =>{\r\n//                 this.setState({\r\n//                 data:snap.val()\r\n//             })});\r\n//             console.log(data);\r\n    \r\n        \r\n//     }\r\n//     render() {\r\n//         return (\r\n//         <h1>{this.state.data}</h1>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default MessageBox;\r\n\r\n\r\n// // const MessageBox =()=>{\r\n// //     const data= Message();\r\n// //     console.log(data)\r\n// //     return(\r\n// //         <h1>{data}</h1>\r\n// //     ) \r\n// // }\r\n// // export default MessageBox;","  import React, { Component } from \"react\"\n  import \"./App.css\"\n  import firebase from \"./firebase\"\n  import StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\nimport MessageBox from \"./Component/MessageBox\"\nimport { Container} from \"react-bootstrap\"\n  \n  \n  class App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { isSignedIn: false,value:\"\" }\n    this.handleChange = this.handleChange.bind(this);\n    }\n    uiConfig = {\n      signInFlow: \"popup\",\n      signInOptions: [\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n      ],\n      callbacks: {\n        signInSuccess: () => false\n      }\n    }\n  \n    componentDidMount = () => {\n      firebase.auth().onAuthStateChanged(user => {\n        this.setState({ isSignedIn: !!user })\n        console.log(\"user\", user)\n      })\n    }\n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n\n    render() {\n      console.log(firebase.auth().currentUser);\n      return (\n        <div>\n          {this.state.isSignedIn ? (\n            <Container fluid>\n\n              {this.state.value===\"asif\" ? (\n                <MessageBox/>\n              ):(\n                <form style={{color:'white', margin:\"15% 45%\"}} onSubmit={this.handleSubmit}>\n                  <h3 style={{fontSize:\"16px\",paddingLeft:'22px'}}>GoJustitech Pin</h3>\n                  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                  <button onClick={() => firebase.auth().signOut()}>Sign out!</button>\n              </form>\n              )}\n              \n              </Container>\n          ) : (\n            <StyledFirebaseAuth \n              uiConfig={this.uiConfig}\n              firebaseAuth={firebase.auth()}\n            />\n          )}\n        </div>\n      )\n    }\n  }\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n// asif@gmail.com     adminid\n"],"sourceRoot":""}